source("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas/SemilleroUnico.R")
# Generación de datos
library(exams)
library(ggplot2)
library(knitr)
library(adjustbox) # Added for image scaling
# Generación de datos
library(exams)
library(ggplot2)
library(knitr)
library(adjustbox) # Added for image scaling
# Generación de datos
library(exams)
library(ggplot2)
library(knitr)
# Parámetros del círculo
radio <- sample(4:8, 1)
angulo <- sample(30:60, 1)
angulo_rad <- angulo * pi/180
# Cálculos
cuerda <- 2 * radio * sin(angulo_rad/2)
area_sector <- (angulo/360) * pi * radio^2
area_triangulo <- (radio^2 * sin(angulo_rad))/2
area_segmento <- area_sector - area_triangulo
# Crear el gráfico
p <- ggplot() +
# Círculo completo
stat_function(fun = function(x) sqrt(radio^2 - x^2),
xlim = c(-radio, radio)) +
stat_function(fun = function(x) -sqrt(radio^2 - x^2),
xlim = c(-radio, radio)) +
# Líneas del sector
geom_segment(aes(x = 0, y = 0,
xend = radio * cos(angulo_rad),
yend = radio * sin(angulo_rad))) +
geom_segment(aes(x = 0, y = 0,
xend = radio,
yend = 0)) +
# Configuración del gráfico
coord_fixed() +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()) +
xlim(-radio-1, radio+1) +
ylim(-radio-1, radio+1)
# Guardar el gráfico
ggsave("sector_circular.png", p, width = 6, height = 6)
# Opciones de respuesta
resp_correcta <- round(area_segmento, 2)
distractores <- c(
round(area_sector, 2),
round(area_triangulo, 2),
round(cuerda * radio / 2, 2)
)
# Mezclar las opciones
opciones <- c(resp_correcta, distractores)
opciones <- sample(opciones)
solucion <- which(opciones == resp_correcta)
typ <- match_exams_device()
include_graphics("sector_circular.png", format = typ)
# Generación de datos
library(exams)
library(ggplot2)
library(knitr)
# Parámetros del círculo
radio <- sample(4:8, 1)
angulo <- sample(30:60, 1)
angulo_rad <- angulo * pi/180
# Cálculos
cuerda <- 2 * radio * sin(angulo_rad/2)
area_sector <- (angulo/360) * pi * radio^2
area_triangulo <- (radio^2 * sin(angulo_rad))/2
area_segmento <- area_sector - area_triangulo
# Crear el gráfico
p <- ggplot() +
# Círculo completo
stat_function(fun = function(x) sqrt(radio^2 - x^2),
xlim = c(-radio, radio)) +
stat_function(fun = function(x) -sqrt(radio^2 - x^2),
xlim = c(-radio, radio)) +
# Líneas del sector
geom_segment(aes(x = 0, y = 0,
xend = radio * cos(angulo_rad),
yend = radio * sin(angulo_rad))) +
geom_segment(aes(x = 0, y = 0,
xend = radio,
yend = 0)) +
# Configuración del gráfico
coord_fixed() +
theme_minimal() +
theme(axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank()) +
xlim(-radio-1, radio+1) +
ylim(-radio-1, radio+1)
# Guardar el gráfico
ggsave("sector_circular.png", p, width = 6, height = 6)
# Opciones de respuesta
resp_correcta <- round(area_segmento, 2)
distractores <- c(
round(area_sector, 2),
round(area_triangulo, 2),
round(cuerda * radio / 2, 2)
)
# Mezclar las opciones
opciones <- c(resp_correcta, distractores)
opciones <- sample(opciones)
solucion <- which(opciones == resp_correcta)
typ <- match_exams_device()
include_graphics("sector_circular.png", format = typ)
# Librerías requeridas
library(exams)
library(ggplot2)  # Para gráficos avanzados
library(reshape2) # Para manipulación de datos
library(tidyr)    # Para limpieza de datos
library(scales)   # Para mejores escalas en gráficos
library(testthat) # Para pruebas unitarias
library(digest)    # Para pruebas de diversidad de versiones
# Función de generación de datos
generar_datos <- function() {
# Generar un triángulo equilátero
lado <- runif(1, 5, 10) # Longitud del lado entre 5 y 10
datos <- list(
tipo = "equilátero",
lados = c(lado, lado, lado),
ángulos = c(60, 60, 60)
)
return(datos)
}
# Generar datos
# set.seed() debe estar comentado para asegurar verdadera aleatoriedad
datos <- generar_datos()
# Cálculos adicionales y validaciones
# Documentar cada paso
# Prueba de diversidad de versiones
test_that("Prueba de diversidad de versiones", {
# Generar y almacenar 1000 versiones
versiones <- list()
for(i in 1:1000) {
datos_test <- generar_datos()
versiones[[i]] <- digest::digest(datos_test)  # Crear hash de los datos
}
# Verificar al menos 300 versiones únicas
n_versiones_unicas <- length(unique(versiones))
expect_true(n_versiones_unicas >= 300,
info = paste("Solo se generaron", n_versiones_unicas,
"versiones únicas. Se requieren al menos 300."))
})
# Pruebas unitarias adicionales
test_that("Pruebas de validación de datos", {
# Pruebas de estructura
# Pruebas de rango
# Pruebas de distribución
# Casos límite
# Pruebas de relación entre variables
# Comentario para evitar error de sintaxis
expect_true(1 == 1)
})
# Preparación de visualización
# Alternar entre colores pastel y vivos entre versiones
# Usar paletas de colores diversas, nunca la misma combinación
# Documentar decisiones de diseño
# Calcular las coordenadas de los vértices del triángulo
lado <- datos$lados[1]
x1 <- 0
y1 <- 0
x2 <- lado
y2 <- 0
x3 <- lado / 2
y3 <- lado * sqrt(3) / 2
# Código TikZ para dibujar el triángulo
tikz <- sprintf("\\\\begin{tikzpicture}
\\\\draw (%f,%f) -- (%f,%f) -- (%f,%f) -- cycle;
\\\\end{tikzpicture}", x1, y1, x2, y2, x3, y3)
# Librerías requeridas
library(exams)
library(ggplot2)  # Para gráficos avanzados
library(reshape2) # Para manipulación de datos
library(tidyr)    # Para limpieza de datos
library(scales)   # Para mejores escalas en gráficos
library(testthat) # Para pruebas unitarias
library(digest)    # Para pruebas de diversidad de versiones
# Función de generación de datos
generar_datos <- function() {
# Generar un triángulo equilátero
lado <- runif(1, 5, 10) # Longitud del lado entre 5 y 10
datos <- list(
tipo = "equilátero",
lados = c(lado, lado, lado),
ángulos = c(60, 60, 60)
)
return(datos)
}
# Generar datos
# set.seed() debe estar comentado para asegurar verdadera aleatoriedad
datos <- generar_datos()
# Cálculos adicionales y validaciones
# Documentar cada paso
# Prueba de diversidad de versiones
test_that("Prueba de diversidad de versiones", {
# Generar y almacenar 1000 versiones
versiones <- list()
for(i in 1:1000) {
datos_test <- generar_datos()
versiones[[i]] <- digest::digest(datos_test)  # Crear hash de los datos
}
# Verificar al menos 300 versiones únicas
n_versiones_unicas <- length(unique(versiones))
expect_true(n_versiones_unicas >= 300,
info = paste("Solo se generaron", n_versiones_unicas,
"versiones únicas. Se requieren al menos 300."))
})
# Pruebas unitarias adicionales
test_that("Pruebas de validación de datos", {
# Pruebas de estructura
# Pruebas de rango
# Pruebas de distribución
# Casos límite
# Pruebas de relación entre variables
# Comentario para evitar error de sintaxis
expect_true(1 == 1)
})
# Preparación de visualización
# Alternar entre colores pastel y vivos entre versiones
# Usar paletas de colores diversas, nunca la misma combinación
# Documentar decisiones de diseño
# Calcular las coordenadas de los vértices del triángulo
lado <- datos$lados[1]
x1 <- 0
y1 <- 0
x2 <- lado
y2 <- 0
x3 <- lado / 2
y3 <- lado * sqrt(3) / 2
# Código TikZ para dibujar el triángulo
tikz <- sprintf("\\\\begin{tikzpicture}
\\\\draw (%f,%f) -- (%f,%f) -- (%f,%f) -- cycle;
\\\\end{tikzpicture}", x1, y1, x2, y2, x3, y3)
# Librerías requeridas
library(exams)
library(ggplot2)  # Para gráficos avanzados
library(reshape2) # Para manipulación de datos
library(tidyr)    # Para limpieza de datos
library(scales)   # Para mejores escalas en gráficos
library(testthat) # Para pruebas unitarias
library(digest)    # Para pruebas de diversidad de versiones
# Función de generación de datos
generar_datos <- function() {
# Generar un triángulo equilátero
lado <- runif(1, 5, 10) # Longitud del lado entre 5 y 10
datos <- list(
tipo = "equilátero",
lados = c(lado, lado, lado),
ángulos = c(60, 60, 60)
)
return(datos)
}
# Generar datos
# set.seed() debe estar comentado para asegurar verdadera aleatoriedad
datos <- generar_datos()
# Cálculos adicionales y validaciones
# Documentar cada paso
# Prueba de diversidad de versiones
test_that("Prueba de diversidad de versiones", {
# Generar y almacenar 1000 versiones
versiones <- list()
for(i in 1:1000) {
datos_test <- generar_datos()
versiones[[i]] <- digest::digest(datos_test)  # Crear hash de los datos
}
# Verificar al menos 300 versiones únicas
n_versiones_unicas <- length(unique(versiones))
expect_true(n_versiones_unicas >= 300,
info = paste("Solo se generaron", n_versiones_unicas,
"versiones únicas. Se requieren al menos 300."))
})
# Pruebas unitarias adicionales
test_that("Pruebas de validación de datos", {
# Pruebas de estructura
# Pruebas de rango
# Pruebas de distribución
# Casos límite
# Pruebas de relación entre variables
# Comentario para evitar error de sintaxis
expect_true(1 == 1)
})
# Preparación de visualización
# Alternar entre colores pastel y vivos entre versiones
# Usar paletas de colores diversas, nunca la misma combinación
# Documentar decisiones de diseño
# Calcular las coordenadas de los vértices del triángulo
lado <- datos$lados[1]
x1 <- 0
y1 <- 0
x2 <- lado
y2 <- 0
x3 <- lado / 2
y3 <- lado * sqrt(3) / 2
# Código TikZ para dibujar el triángulo
tikz <- sprintf("\\\\begin{tikzpicture}
\\\\draw (%f,%f) -- (%f,%f) -- (%f,%f) -- cycle;
\\\\end{tikzpicture}", x1, y1, x2, y2, x3, y3)
source("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas/SemilleroUnico2.R")
setwd("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas")
source("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas/SemilleroUnico2.R")
# Librerías requeridas
library(exams)
library(ggplot2)  # Para gráficos avanzados
library(reshape2) # Para manipulación de datos
library(tidyr)    # Para limpieza de datos
library(scales)   # Para mejores escalas en gráficos
library(testthat) # Para pruebas unitarias
library(digest)    # Para pruebas de diversidad de versiones
# Función de generación de datos
generar_datos <- function() {
# Generar un triángulo equilátero
lado <- runif(1, 5, 10) # Longitud del lado entre 5 y 10
datos <- list(
tipo = "equilátero",
lados = c(lado, lado, lado),
ángulos = c(60, 60, 60)
)
return(datos)
}
# Generar datos
# set.seed() debe estar comentado para asegurar verdadera aleatoriedad
datos <- generar_datos()
# Cálculos adicionales y validaciones
# Documentar cada paso
# Prueba de diversidad de versiones
test_that("Prueba de diversidad de versiones", {
# Generar y almacenar 1000 versiones
versiones <- list()
for(i in 1:1000) {
datos_test <- generar_datos()
versiones[[i]] <- digest::digest(datos_test)  # Crear hash de los datos
}
# Verificar al menos 300 versiones únicas
n_versiones_unicas <- length(unique(versiones))
expect_true(n_versiones_unicas >= 300,
info = paste("Solo se generaron", n_versiones_unicas,
"versiones únicas. Se requieren al menos 300."))
})
# Pruebas unitarias adicionales
test_that("Pruebas de validación de datos", {
# Pruebas de estructura
# Pruebas de rango
# Pruebas de distribución
# Casos límite
# Pruebas de relación entre variables
# Comentario para evitar error de sintaxis
expect_true(1 == 1)
})
# Preparación de visualización
# Alternar entre colores pastel y vivos entre versiones
# Usar paletas de colores diversas, nunca la misma combinación
# Documentar decisiones de diseño
# Calcular las coordenadas de los vértices del triángulo
lado <- datos$lados[1]
x1 <- 0
y1 <- 0
x2 <- lado
y2 <- 0
x3 <- lado / 2
y3 <- lado * sqrt(3) / 2
# Código TikZ para dibujar el triángulo
tikz <- sprintf("\\\\begin{tikzpicture}
\\\\draw (%f,%f) -- (%f,%f) -- (%f,%f) -- cycle;
\\\\end{tikzpicture}", x1, y1, x2, y2, x3, y3)
knitr::opts_chunk$set(sanitize = FALSE)
cat("\\usepackage{tikz}\n")
cat(tikz)
source("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas/SemilleroUnico2.R")
source("~/Insync/alvaroangelm@iepedacitodecielo.edu.co/Google Drive/Proyecto-Rexams-2025/r_exams_project/Repositorio_Matematicas_ICFES_PISA/Estadistica/Graficos_Estadisticos_Adopcion_Mascotas/SemilleroUnico2.R")
