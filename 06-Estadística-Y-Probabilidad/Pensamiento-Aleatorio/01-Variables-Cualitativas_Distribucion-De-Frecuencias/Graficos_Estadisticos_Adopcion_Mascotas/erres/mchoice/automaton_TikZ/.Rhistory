p2 = 0.5, sesgado = FALSE, izquierda = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(sesgado) exp(x) else x
}
x <- sim()
if(sesgado) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(izquierda) x <- -x
x <- media + de * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpDiagramaCaja(n = n, media = m, de = s, delta = delta,
p2 = p2, sesgado = sesgado, izquierda = izquierda), digits = 2)
b <- boxplot(x, plot = FALSE)
dispersion <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## PREGUNTA/SOLUCIÓN
preguntas <- soluciones <- explicaciones <- rep(list(""), 6)
tipo <- rep(list("schoice"), 6)
preguntas[[1]] <- paste("La distribución es ", c("", "_no_ "), "unimodal.", sep = "")
soluciones[[1]] <- c(delta < 1, delta > 1)
preguntas[[2]] <- paste("La distribución es", c("simétrica.", "sesgada a la derecha.", "sesgada a la izquierda."))
soluciones[[2]] <- c(!sesgado, sesgado & !izquierda, sesgado & izquierda)
preguntas[[3]] <- paste("El diagrama de caja muestra ", c("", "_ningún_ "), "valor atípico.", sep = "")
soluciones[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
preguntas[[4]] <- "¿Qué valor es menor que un cuarto de las observaciones?"
soluciones[[4]] <- explicaciones[[4]] <- signif(b$stats[[2]], 3)
tipo[[4]] <- "num"
preguntas[[5]] <- "¿Qué valor es mayor que un cuarto de las observaciones?"
soluciones[[5]] <- explicaciones[[5]] <- signif(b$stats[[4]], 3)
tipo[[5]] <- "num"
preguntas[[6]] <- paste("La mitad de las observaciones son",
sample(c("menores", "mayores"), 1), "que ¿qué valor?")
soluciones[[6]] <- explicaciones[[6]] <- signif(b$stats[[3]], 3)
tipo[[6]] <- "num"
explicaciones[1:3] <- lapply(soluciones[1:3], function(x) ifelse(x, "Verdadero", "Falso"))
# Definir la función mchoice2string
mchoice2string <- function(x) {
paste(as.integer(x), collapse = "")
}
# Usar la función
soluciones[1:3] <- lapply(soluciones[1:3], mchoice2string)
if(any(explicaciones[4:6] < 0)) explicaciones[4:6] <- lapply(soluciones[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(preguntas), markup = "markdown")
## DATA
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
skewed <- left <- FALSE
if(!delta) {
skewed <- runif(1) < 0.6
left <- runif(1) < 0.3
}
dgpBoxhist <- function(n = 40, mean = 0, sd = 1, delta = 0,
p2 = 0.5, skewed = FALSE, left = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(skewed) exp(x) else x
}
x <- sim()
if(skewed) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(left) x <- -x
x <- mean + sd * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpBoxhist(n = n, mean = m, sd = s, delta = delta,
p2 = p2, skewed = skewed, left = left), digits = 2)
b <- boxplot(x, plot = FALSE)
spread <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## QUESTION/SOLUTION
questions <- solutions <- explanations <- rep(list(""), 6)
type <- rep(list("schoice"), 6)
questions[[1]] <- paste("The distribution is ", c("", "_not_ "), "unimodal.", sep = "")
solutions[[1]] <- c(delta < 1, delta > 1)
questions[[2]] <- paste("The distribution is", c("symmetric.", "right-skewed.", "left-skewed."))
solutions[[2]] <- c(!skewed, skewed & !left, skewed & left)
questions[[3]] <- paste("The boxplot shows ", c("", "_no_ "), "outliers.", sep = "")
solutions[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
questions[[4]] <- "A quarter of the observations is smaller than which value?"
solutions[[4]] <- explanations[[4]] <- signif(b$stats[[2]], 3)
type[[4]] <- "num"
questions[[5]] <- "A quarter of the observations is greater than which value?"
solutions[[5]] <- explanations[[5]] <- signif(b$stats[[4]], 3)
type[[5]] <- "num"
questions[[6]] <- paste("Half of the observations are",
sample(c("smaller", "greater"), 1), "than which value?")
solutions[[6]] <- explanations[[6]] <- signif(b$stats[[3]], 3)
type[[6]] <- "num"
explanations[1:3] <- lapply(solutions[1:3], function(x) ifelse(x, "True", "False"))
solutions[1:3] <- lapply(solutions[1:3], mchoice2string)
if(any(explanations[4:6] < 0)) explanations[4:6] <- lapply(solutions[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(questions), markup = "markdown")
## DATOS
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
sesgado <- izquierda <- FALSE
if(!delta) {
sesgado <- runif(1) < 0.6
izquierda <- runif(1) < 0.3
}
dgpDiagramaCaja <- function(n = 40, media = 0, de = 1, delta = 0,
p2 = 0.5, sesgado = FALSE, izquierda = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(sesgado) exp(x) else x
}
x <- sim()
if(sesgado) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(izquierda) x <- -x
x <- media + de * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpDiagramaCaja(n = n, media = m, de = s, delta = delta,
p2 = p2, sesgado = sesgado, izquierda = izquierda), digits = 2)
b <- boxplot(x, plot = FALSE)
dispersion <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## PREGUNTA/SOLUCIÓN
preguntas <- soluciones <- explicaciones <- rep(list(""), 6)
tipo <- rep(list("schoice"), 6)
preguntas[[1]] <- paste("La distribución es ", c("", "_no_ "), "unimodal.", sep = "")
soluciones[[1]] <- c(delta < 1, delta > 1)
preguntas[[2]] <- paste("La distribución es", c("simétrica.", "sesgada a la derecha.", "sesgada a la izquierda."))
soluciones[[2]] <- c(!sesgado, sesgado & !izquierda, sesgado & izquierda)
preguntas[[3]] <- paste("El diagrama de caja muestra ", c("", "_ningún_ "), "valor atípico.", sep = "")
soluciones[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
preguntas[[4]] <- "¿Qué valor es menor que un cuarto de las observaciones?"
soluciones[[4]] <- explicaciones[[4]] <- signif(b$stats[[2]], 3)
tipo[[4]] <- "num"
preguntas[[5]] <- "¿Qué valor es mayor que un cuarto de las observaciones?"
soluciones[[5]] <- explicaciones[[5]] <- signif(b$stats[[4]], 3)
tipo[[5]] <- "num"
preguntas[[6]] <- paste("La mitad de las observaciones son",
sample(c("menores", "mayores"), 1), "que ¿qué valor?")
soluciones[[6]] <- explicaciones[[6]] <- signif(b$stats[[3]], 3)
tipo[[6]] <- "num"
explicaciones[1:3] <- lapply(soluciones[1:3], function(x) ifelse(x, "Verdadero", "Falso"))
soluciones[1:3] <- lapply(soluciones[1:3], mchoice2string)
if(any(explicaciones[4:6] < 0)) explicaciones[4:6] <- lapply(soluciones[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(preguntas), markup = "markdown")
library(exams)
## DATOS
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
sesgado <- izquierda <- FALSE
if(!delta) {
sesgado <- runif(1) < 0.6
izquierda <- runif(1) < 0.3
}
dgpDiagramaCaja <- function(n = 40, media = 0, de = 1, delta = 0,
p2 = 0.5, sesgado = FALSE, izquierda = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(sesgado) exp(x) else x
}
x <- sim()
if(sesgado) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(izquierda) x <- -x
x <- media + de * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpDiagramaCaja(n = n, media = m, de = s, delta = delta,
p2 = p2, sesgado = sesgado, izquierda = izquierda), digits = 2)
b <- boxplot(x, plot = FALSE)
dispersion <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## PREGUNTA/SOLUCIÓN
preguntas <- soluciones <- explicaciones <- rep(list(""), 6)
tipo <- rep(list("schoice"), 6)
preguntas[[1]] <- paste("La distribución es ", c("", "_no_ "), "unimodal.", sep = "")
soluciones[[1]] <- c(delta < 1, delta > 1)
preguntas[[2]] <- paste("La distribución es", c("simétrica.", "sesgada a la derecha.", "sesgada a la izquierda."))
soluciones[[2]] <- c(!sesgado, sesgado & !izquierda, sesgado & izquierda)
preguntas[[3]] <- paste("El diagrama de caja muestra ", c("", "_ningún_ "), "valor atípico.", sep = "")
soluciones[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
preguntas[[4]] <- "¿Qué valor es menor que un cuarto de las observaciones?"
soluciones[[4]] <- explicaciones[[4]] <- signif(b$stats[[2]], 3)
tipo[[4]] <- "num"
preguntas[[5]] <- "¿Qué valor es mayor que un cuarto de las observaciones?"
soluciones[[5]] <- explicaciones[[5]] <- signif(b$stats[[4]], 3)
tipo[[5]] <- "num"
preguntas[[6]] <- paste("La mitad de las observaciones son",
sample(c("menores", "mayores"), 1), "que ¿qué valor?")
soluciones[[6]] <- explicaciones[[6]] <- signif(b$stats[[3]], 3)
tipo[[6]] <- "num"
explicaciones[1:3] <- lapply(soluciones[1:3], function(x) ifelse(x, "Verdadero", "Falso"))
soluciones[1:3] <- lapply(soluciones[1:3], mchoice2string)
if(any(explicaciones[4:6] < 0)) explicaciones[4:6] <- lapply(soluciones[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(preguntas), markup = "markdown")
par(mfrow = c(1, 2))
boxplot(x, axes = FALSE)
axis(2, at = signif(b$stats, 3), las = 1)
box()
hist(x, freq = FALSE, main = "")
rug(x)
answerlist(unlist(explicaciones), markup = "markdown")
library(exams)
## DATOS
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
sesgado <- izquierda <- FALSE
if(!delta) {
sesgado <- runif(1) < 0.6
izquierda <- runif(1) < 0.3
}
dgpDiagramaCaja <- function(n = 40, media = 0, de = 1, delta = 0,
p2 = 0.5, sesgado = FALSE, izquierda = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(sesgado) exp(x) else x
}
x <- sim()
if(sesgado) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(izquierda) x <- -x
x <- media + de * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpDiagramaCaja(n = n, media = m, de = s, delta = delta,
p2 = p2, sesgado = sesgado, izquierda = izquierda), digits = 2)
b <- boxplot(x, plot = FALSE)
dispersion <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## PREGUNTA/SOLUCIÓN
preguntas <- soluciones <- explicaciones <- rep(list(""), 6)
tipo <- rep(list("schoice"), 6)
preguntas[[1]] <- paste("La distribución es ", c("", "_no_ "), "unimodal.", sep = "")
soluciones[[1]] <- c(delta < 1, delta > 1)
preguntas[[2]] <- paste("La distribución es", c("simétrica.", "sesgada a la derecha.", "sesgada a la izquierda."))
soluciones[[2]] <- c(!sesgado, sesgado & !izquierda, sesgado & izquierda)
preguntas[[3]] <- paste("El diagrama de caja muestra ", c("", "_ningún_ "), "valor atípico.", sep = "")
soluciones[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
preguntas[[4]] <- "¿Qué valor es menor que un cuarto de las observaciones?"
soluciones[[4]] <- explicaciones[[4]] <- signif(b$stats[[2]], 3)
tipo[[4]] <- "num"
preguntas[[5]] <- "¿Qué valor es mayor que un cuarto de las observaciones?"
soluciones[[5]] <- explicaciones[[5]] <- signif(b$stats[[4]], 3)
tipo[[5]] <- "num"
preguntas[[6]] <- paste("La mitad de las observaciones son",
sample(c("menores", "mayores"), 1), "que ¿qué valor?")
soluciones[[6]] <- explicaciones[[6]] <- signif(b$stats[[3]], 3)
tipo[[6]] <- "num"
explicaciones[1:3] <- lapply(soluciones[1:3], function(x) ifelse(x, "Verdadero", "Falso"))
soluciones[1:3] <- lapply(soluciones[1:3], mchoice2string)
if(any(explicaciones[4:6] < 0)) explicaciones[4:6] <- lapply(soluciones[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(preguntas), markup = "markdown")
par(mfrow = c(1, 2))
boxplot(x, axes = FALSE)
axis(2, at = signif(b$stats, 3), las = 1)
box()
hist(x, freq = FALSE, main = "")
rug(x)
answerlist(unlist(explicaciones), markup = "markdown")
setwd("~/Documentos/Proyecto-Rexams-2025/erres/cloze/boxhist")
source("~/Documentos/Proyecto-Rexams-2025/erres/cloze/boxhist/SemilleroPrincipal.R")
setwd("~/Documentos/Proyecto-Rexams-2025/erres/cloze/boxhist2")
## DATA
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
skewed <- left <- FALSE
if(!delta) {
skewed <- runif(1) < 0.6
left <- runif(1) < 0.3
}
dgpBoxhist <- function(n = 40, mean = 0, sd = 1, delta = 0,
p2 = 0.5, skewed = FALSE, left = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(skewed) exp(x) else x
}
x <- sim()
if(skewed) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(left) x <- -x
x <- mean + sd * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpBoxhist(n = n, mean = m, sd = s, delta = delta,
p2 = p2, skewed = skewed, left = left), digits = 2)
b <- boxplot(x, plot = FALSE)
spread <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## QUESTION/SOLUTION
questions <- solutions <- explanations <- rep(list(""), 6)
type <- rep(list("schoice"), 6)
questions[[1]] <- c("true", "false")
solutions[[1]] <- c(delta < 1, delta > 1)
questions[[2]] <- c("symmetric", "right-skewed", "left-skewed")
solutions[[2]] <- c(!skewed, skewed & !left, skewed & left) ## FIXME: !skewed -> !skewed | delta ?
questions[[3]] <- c("true", "false")
solutions[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
questions[[4]] <- ""
solutions[[4]] <- explanations[[4]] <- signif(b$stats[[2]], 3)
type[[4]] <- "num"
questions[[5]] <- ""
solutions[[5]] <- explanations[[5]] <- signif(b$stats[[4]], 3)
type[[5]] <- "num"
smallgreat <- sample(c("smaller", "greater"), 1)
questions[[6]] <- ""
solutions[[6]] <- explanations[[6]] <- signif(b$stats[[3]], 3)
type[[6]] <- "num"
explanations[1:3] <- lapply(solutions[1:3], function(x) ifelse(x, "True", "False"))
solutions[1:3] <- lapply(solutions[1:3], mchoice2string)
if(any(explanations[4:6] < 0)) explanations[4:6] <- lapply(solutions[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(questions), markup = "markdown")
par(mfrow = c(1, 2))
boxplot(x, axes = FALSE)
axis(2, at = signif(b$stats, 3), las = 1)
box()
hist(x, freq = FALSE, main = "")
rug(x)
answerlist(unlist(explanations), markup = "markdown")
source("~/Documentos/Proyecto-Rexams-2025/erres/cloze/boxhist2/SemilleroPrincipal.R")
## DATOS
n <- sample(30:50, 1)
m <- sample(1:4, 1)
s <- runif(1, 0.5, 2)
delta <- ifelse(runif(1) < 0.2, sample(8:12), 0)
p2 <- runif(1, 0.45, 0.55)
sesgada <- izquierda <- FALSE
if(!delta) {
sesgada <- runif(1) < 0.6
izquierda <- runif(1) < 0.3
}
dgpBoxhist <- function(n = 40, media = 0, de = 1, delta = 0,
p2 = 0.5, sesgada = FALSE, izquierda = FALSE)
{
SK <- function(x) abs(diff(diff(fivenum(x)[2:4]))/diff(fivenum(x)[c(2, 4)]))
sim <- function(x){
x <- rnorm(n)
if(sesgada) exp(x) else x
}
x <- sim()
if(sesgada) while(SK(x) < 0.7) x <- sim() else while(SK(x) > 0.15) x <- sim()
if(izquierda) x <- -x
x <- media + de * scale(x)
k <- sample(1:n, round(p2 * n))
x[k] <- x[k] + delta
as.vector(sample(x))
}
x <- round(dgpBoxhist(n = n, media = m, de = s, delta = delta,
p2 = p2, sesgada = sesgada, izquierda = izquierda), digits = 2)
b <- boxplot(x, plot = FALSE)
dispersion <- tol <- signif(diff(range(c(b$stats, b$out)))/25, 1)
write.csv(data.frame(x), file = "boxhist.csv", quote = FALSE, row.names = FALSE)
## PREGUNTA/SOLUCIÓN
preguntas <- soluciones <- explicaciones <- rep(list(""), 6)
tipo <- rep(list("schoice"), 6)
preguntas[[1]] <- c("verdadero", "falso")
soluciones[[1]] <- c(delta < 1, delta > 1)
preguntas[[2]] <- c("simétrica", "sesgada a la derecha", "sesgada a la izquierda")
soluciones[[2]] <- c(!sesgada, sesgada & !izquierda, sesgada & izquierda) ## FIXME: !sesgada -> !sesgada | delta ?
preguntas[[3]] <- c("verdadero", "falso")
soluciones[[3]] <- c(length(b$out) > 0, length(b$out) < 1)
preguntas[[4]] <- ""
soluciones[[4]] <- explicaciones[[4]] <- signif(b$stats[[2]], 3)
tipo[[4]] <- "num"
preguntas[[5]] <- ""
soluciones[[5]] <- explicaciones[[5]] <- signif(b$stats[[4]], 3)
tipo[[5]] <- "num"
menor_mayor <- sample(c("menor", "mayor"), 1)
preguntas[[6]] <- ""
soluciones[[6]] <- explicaciones[[6]] <- signif(b$stats[[3]], 3)
tipo[[6]] <- "num"
explicaciones[1:3] <- lapply(soluciones[1:3], function(x) ifelse(x, "Verdadero", "Falso"))
soluciones[1:3] <- lapply(soluciones[1:3], mchoice2string)
if(any(explicaciones[4:6] < 0)) explicaciones[4:6] <- lapply(soluciones[4:6], function(x) paste("$", x, "$", sep = ""))
answerlist(unlist(preguntas), markup = "markdown")
par(mfrow = c(1, 2))
boxplot(x, axes = FALSE)
axis(2, at = signif(b$stats, 3), las = 1)
box()
hist(x, freq = FALSE, main = "")
rug(x)
answerlist(unlist(explicaciones), markup = "markdown")
source("~/Documentos/Proyecto-Rexams-2025/erres/cloze/boxhist2/SemilleroPrincipal.R")
setwd("~/Documentos/Proyecto-Rexams-2025/erres/mchoice/automaton_TikZ")
# use the same graphics type (pdf, svg, png) as the current xweave() call
typ <- match_exams_device()
## tikz automaton code with two placeholders
automaton <- '
\\begin{tikzpicture}[shorten >=1pt,node distance=2cm]
\\node[state, initial%s] (A)              {A};
\\node[state%s]          (B) [below=of A] {B};
\\node[state%s]          (C) [right=of A] {C};
\\node[state%s]          (D) [below=of C] {D};
\\path[->] (A) edge [bend left=20] node [right] {1} (B)
(A) edge [bend left=20] node [above] {0} (C)
(B) edge [bend left=20] node [left]  {1} (A)
(B) edge [bend left=20] node [above] {0} (D)
(C) edge [bend left=20] node [right] {1} (D)
(C) edge [bend left=20] node [below] {0} (A)
(D) edge [bend left=20] node [left]  {1} (C)
(D) edge [bend left=20] node [below] {0} (B);
\\end{tikzpicture}
'
## sample acceptance state and insertions
accept <- sample(c("A", "B", "C", "D"), 1)
automaton <- sprintf(automaton,
if(accept == "A") ", accepting" else "",
if(accept == "B") ", accepting" else "",
if(accept == "C") ", accepting" else "",
if(accept == "D") ", accepting" else "")
## assure unique sequences
ok <- FALSE
while(!ok) {
## five random sequences
sequences <- replicate(5,
sample(0:1, sample(4:7, 1), replace = TRUE),
simplify = FALSE
)
## check whether even or odd sequences lead to accepting state
even0 <- accept %in% c("A", "B")
even1 <- accept %in% c("A", "C")
n1 <- sapply(sequences, sum)
n0 <- sapply(sequences, length) - n1
sol <- (even0 == (n0 %% 2L < 1L)) & (even1 == (n1 %% 2L < 1L))
sequences <- sapply(sequences, paste, collapse = "")
ok <- all(!duplicated(sequences)) && any(sol) && any(!sol)
}
include_tikz(automaton, name = "automaton", format = typ, markup = "markdown",
library = c("automata", "positioning"),
width = "5cm")
answerlist(sequences, markup = "markdown")
answerlist(ifelse(sol, "Accepted", "Not accepted"), markup = "markdown")
source("~/Documentos/Proyecto-Rexams-2025/erres/mchoice/automaton_TikZ/SemilleroPrincipal.R")
# usar el mismo tipo de gráficos (pdf, svg, png) que la llamada actual de xweave()
tipo <- match_exams_device()
## código tikz del autómata con dos marcadores de posición
automata <- '
\\begin{tikzpicture}[shorten >=1pt,node distance=2cm]
\\node[state, initial%s] (A)              {A};
\\node[state%s]          (B) [below=of A] {B};
\\node[state%s]          (C) [right=of A] {C};
\\node[state%s]          (D) [below=of C] {D};
\\path[->] (A) edge [bend left=20] node [right] {1} (B)
(A) edge [bend left=20] node [above] {0} (C)
(B) edge [bend left=20] node [left]  {1} (A)
(B) edge [bend left=20] node [above] {0} (D)
(C) edge [bend left=20] node [right] {1} (D)
(C) edge [bend left=20] node [below] {0} (A)
(D) edge [bend left=20] node [left]  {1} (C)
(D) edge [bend left=20] node [below] {0} (B);
\\end{tikzpicture}
'
## muestra el estado de aceptación e inserciones
aceptar <- sample(c("A", "B", "C", "D"), 1)
automata <- sprintf(automata,
if(aceptar == "A") ", accepting" else "",
if(aceptar == "B") ", accepting" else "",
if(aceptar == "C") ", accepting" else "",
if(aceptar == "D") ", accepting" else "")
## asegurar secuencias únicas
ok <- FALSE
while(!ok) {
## cinco secuencias aleatorias
secuencias <- replicate(5,
sample(0:1, sample(4:7, 1), replace = TRUE),
simplify = FALSE
)
## comprobar si las secuencias pares o impares conducen al estado de aceptación
par0 <- aceptar %in% c("A", "B")
par1 <- aceptar %in% c("A", "C")
n1 <- sapply(secuencias, sum)
n0 <- sapply(secuencias, length) - n1
sol <- (par0 == (n0 %% 2L < 1L)) & (par1 == (n1 %% 2L < 1L))
secuencias <- sapply(secuencias, paste, collapse = "")
ok <- all(!duplicated(secuencias)) && any(sol) && any(!sol)
}
include_tikz(automata, name = "automata", format = tipo, markup = "markdown",
library = c("automata", "positioning"),
width = "5cm")
answerlist(secuencias, markup = "markdown")
answerlist(ifelse(sol, "Aceptada", "No aceptada"), markup = "markdown")
source("~/Documentos/Proyecto-Rexams-2025/erres/mchoice/automaton_TikZ/SemilleroPrincipal.R")
